
// #include <stdint.h>
// #include "combos.h"

// uint16_t COMBO_COUNT = COMBO_COUNT_UNICODE;

// combo_t l_crx_up = COMBO_ACTION(combo_l_crx_up);
// combo_t r_crx_up = COMBO_ACTION(combo_r_crx_up);
// combo_t r_hrz_hm_mid_ind = COMBO_ACTION(combo_r_hrz_hm_mid_ind);
// combo_t r_hrz_up_mid_ind = COMBO_ACTION(combo_r_hrz_up_mid_ind);
// combo_t enter = COMBO_ACTION(combo_enter);
// combo_t r_hrz_dn_mid_ind = COMBO_ACTION(combo_r_hrz_dn_mid_ind);
// combo_t KC_Z_combo = COMBO_ACTION(combo_KC_Z);
// combo_t caps_word = COMBO_ACTION(combo_caps_word);
// combo_t caps_lock = COMBO_ACTION(combo_caps_lock);
// combo_t panic_time = COMBO_ACTION(combo_panic_time);
// combo_t lt_out_index = COMBO_ACTION(combo_lt_out_index);
// combo_t rt_out_ring = COMBO_ACTION(combo_rt_out_ring);

// uint16_t PROGMEM combo_l_crx_up[] = {KC_W, KC_E, COMBO_END};
// uint16_t PROGMEM combo_r_crx_up[] = {KC_U, KC_O, COMBO_END};
// uint16_t PROGMEM combo_r_hrz_hm_mid_ind[] = {KC_J, KC_K, COMBO_END};
// uint16_t PROGMEM combo_r_hrz_up_mid_ind[] = {KC_X, KC_C, COMBO_END};
// uint16_t PROGMEM combo_enter[] = {KC_X, KC_V, COMBO_END};
// uint16_t PROGMEM combo_r_hrz_dn_mid_ind[] = {KC_M, KC_COMM, COMBO_END};
// uint16_t PROGMEM combo_KC_Z[] = {KC_COMM, KC_DOT, COMBO_END};
// uint16_t PROGMEM combo_caps_word[] = {KC_R, KC_U, COMBO_END};
// uint16_t PROGMEM combo_caps_lock[] = {KC_W, KC_O, COMBO_END};
// uint16_t PROGMEM combo_panic_time[] = {KC_D, KC_K, COMBO_END};
// uint16_t PROGMEM combo_lt_out_index[] = {KC_ENT, KC_SPC, COMBO_END};
// uint16_t PROGMEM combo_rt_out_ring[] = {KC_BSPC, KC_TAB, COMBO_END};

// void process_combo_event(uint16_t combo_index, bool pressed) {
//     switch(combo_index) {
//         case COMBO_INDEX(l_crx_up):
//             if (pressed) {
//                 tap_code(KC_ESC);
//             }
//             break;
//         case COMBO_INDEX(r_crx_up):
//             if (pressed) {
//                 tap_code(KC_DQUO);
//             }
//             break;
//         case COMBO_INDEX(r_hrz_hm_mid_ind):
//             if (pressed) {
//                 tap_code(OS_LSFT);
//             }
//             break;
//         case COMBO_INDEX(r_hrz_up_mid_ind):
//             if (pressed) {
//                 tap_code(KC_TAB);
//             }
//             break;
//         case COMBO_INDEX(enter):
//             if (pressed) {
//                 tap_code(KC_ENT);
//             }
//             break;
//         case COMBO_INDEX(r_hrz_dn_mid_ind):
//             if (pressed) {
//                 tap_code(NUMRMODE);
//             }
//             break;
//         case COMBO_INDEX(KC_Z_combo):
//             if (pressed) {
//                 tap_code(KC_Z);
//             }
//             break;
//         case COMBO_INDEX(caps_word):
//             if (pressed) {
//                 tap_code(CW_TOGG);
//             }
//             break;
//         case COMBO_INDEX(caps_lock):
//             if (pressed) {
//                 tap_code(KC_CAPS);
//             }
//             break;
//         case COMBO_INDEX(panic_time):
//             if (pressed) {
//                 tap_code(PANIC);
//             }
//             break;
//         case COMBO_INDEX(lt_out_index):
//             if (pressed) {
//                 tap_code(NUMRMODE);
//             }
//             break;
//         case COMBO_INDEX(rt_out_ring):
//             if (pressed) {
//                 tap_code(FUNMODE);
//             }
//             break;
//     }
// }

// /*    COMBO NAME       | OUTPUT    | PARAMS    */

// /*---- TOP ROW HORIZONTAL----*/
// COMB(l_crx_up,          KC_ESC,     KC_W, KC_E)
// // COMB(l_hrz_up_rng_mid,  KC_PERC,    KC_W, KC_E) 
// //COMB(l_ful_up,          PRVDESK,    KC_W, KC_E, KC_R)
// //COMB(l_hrz_up_ind_lat,  KC_TILD,    KC_R, KC_T)

// //COMB(r_hrz_up_ind_lat,  BRCKETS,    KC_Y, KC_U)
// //COMB(r_ful_up,          NXTDESK,    KC_U, KC_I, KC_O)
// //COMB(r_hrz_up_mid_ind,  KC_TAB,     KC_U, KC_I)
// COMB(r_crx_up,          KC_DQUO,    KC_U, KC_O)

// /*---- HOME ROW HORIZONTAL----*/
// //COMB(cut,               S_CUT,      KC_S, KC_F)
// //COMB(copy,              S_COPY,     KC_S, KC_D)
// //COMB(paste,             S_PASTE,    KC_F, KC_G)
// //COMB(l_ful_hm,          OS_LSFT,   cKC_D, KC_F)

// //COMB(r_ful_hm,          TMUXPRE,    KC_J, KC_K, KC_L)
// //COMB(r_hrz_hm_ind_lat,  KC_CIRC,    KC_H, KC_J)
// COMB(r_hrz_hm_mid_ind,  OS_LSFT,    KC_J, KC_K)
// //COMB(r_crx_hm,          KC_SCLN,    KC_J, KC_L)

// /*---- BOTTOM ROW HORIZONTAL----*/
// //COMB(l_hrz_dn_rng_mid,  KILLWRD,    KC_X, KC_C)
// COMB(r_hrz_up_mid_ind,  KC_TAB,     KC_X, KC_C)
// //COMB(l_hrz_dn_mid_ind,  KC_Z,       KC_C, KC_V)
// COMB(enter,             KC_ENT,     KC_X, KC_V)
// //COMB(l_ful_dn,          KC_EQL,     KC_X, KC_C, KC_V)

// /*COMB(r_ful_dn,          KC_ASTR,    KC_M, KC_COMM, KC_DOT)
// */
// COMB(r_hrz_dn_mid_ind,  NUMRMODE,    	KC_M, KC_COMM)
// //COMB(r_crx_dn,          KC_UNDS,    KC_M, KC_DOT)
// COMB(KC_Z,             KC_Z,     KC_COMM, KC_DOT)
// //COMB(r_hrz_dn_rng_mid,  KC_BSPC,    KC_COMM, KC_DOT)

// /* --- TOP-HOME VERTICALS --- */
// //COMB(l_vert_up_ring,    KC_AT,      KC_S, KC_W)
// //COMB(l_vert_up_ind,     KC_QUOT,    KC_F, KC_R)
// //COMB(l_vert_up_lat,     KC_RABK,    KC_G, KC_T)

// /*COMB(r_vert_up_lat,     KC_LABK,    KC_H, KC_Y)
// COMB(r_vert_up_ind,     KC_DLR,     KC_J, KC_U)
// COMB(r_vert_up_ring,    KC_AMPR,    KC_L, KC_O)
// */

// /* --- HOME-BOTTOM VERTICALS --- */
// /*COMB(l_vert_hm_ring,    KC_GRV,     KC_S, KC_X)
// COMB(click_l,           LCLICK,     KC_D, KC_C)
// COMB(click_r,           RCLICK,     KC_F, KC_V)
// COMB(l_vert_hm_lat,     C(KC_W),    KC_G, KC_B) 
// */
// /*
// COMB(r_vert_hm_ind,     KC_HASH,    KC_J, KC_M)
// COMB(r_vert_hm_mid,     KC_SLSH,    KC_K, KC_COMM)
// COMB(r_vert_hm_rng,     KC_BSLS,    KC_L, KC_DOT)
// */
// /*---- TOP-HOME ADJACENT DIAGONALS ----*/
// /*COMB(l_diag_up_pnk,     OS_LCTL,    KC_Q, KC_S)
// COMB(l_diag_up_mid,     KC_LBRC,    KC_E, KC_F)
// COMB(wheel_up,          KC_WH_U,    KC_R, KC_G)
// */
// /*
// COMB(page_up,           KC_PGUP,    KC_U, KC_H)
// COMB(r_diag_up_mid,     KC_RBRC,    KC_I, KC_J)
// COMB(r_diag_up_pnk,     KC_DEL,     KC_P, KC_L)
// */
// /*---- HOME-BOTTOM ADJACENT DIAGONALS ----*/
// /*
// COMB(l_dcr_hm,          DLAYOUT,    KC_S, KC_V)
// COMB(l_diag_hm_mid,     KC_LPRN,    KC_D, KC_V)
// COMB(wheel_dn,          KC_WH_D,    KC_F, KC_B)

// COMB(page_dn,           KC_PGDN,    KC_J, KC_N)
// COMB(r_diag_hm_mid,     KC_RPRN,    KC_K, KC_M)
// COMB(dmenu,             DMENU,      KC_L, KC_M)
// */
// // COMB(r_diag_hm_pnk,     KC_DEL,     KC_DOT, KC_SCLN)

// /*---- CROSS-HANDS ----*/
// COMB(caps_word,         CW_TOGG,    KC_R, KC_U)
// COMB(caps_lock,         KC_CAPS,    KC_W, KC_O)
 
// COMB(panic_time,        PANIC,      KC_D, KC_K)

// /*---- THUMBS ----*/
// /*COMB(lthumbs,           SYS_OSL,    KC_ENT, KC_TAB)*/
// /*COMB(rthumbs,           MCRMODE,    KC_SPC, KC_BSPC)*/

// /*---- DIAGONAL THUMBS ----*/
// /*COMB(lt_out_ring,       SYMMODE,    KC_TAB, KC_S)
// COMB(lt_out_middle,     MCRMODE,    KC_TAB, KC_D)
// COMB(lt_out_index,      FUNMODE,    KC_TAB, KC_F)

// COMB(rt_out_index,      FUNMODE,    KC_BSPC, KC_J)
// //COMB(rt_out_middle,     NUM_OSL,    KC_BSPC, KC_K)
// COMB(rt_out_ring,       NUMLMODE,    KC_C, KC_V)
// */
// COMB(lt_out_index,      NUMRMODE,    KC_ENT, KC_SPC)
// COMB(rt_out_ring,       FUNMODE,    KC_BSPC, KC_TAB)
